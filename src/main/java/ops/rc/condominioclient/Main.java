package ops.rc.condominioclient;

import java.time.LocalDate;
import java.util.Date;
import java.util.List;

import javax.swing.JOptionPane;

import api.ApiClient;
import api.MoradorApi;
import api.ProblemaApi;
import api.ReuniaoApi;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import ops.rc.condominioclient.entities.Morador;
import ops.rc.condominioclient.entities.Problema;
import ops.rc.condominioclient.entities.Reuniao;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu = new javax.swing.JPopupMenu();
        menuRefresh = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        abaMoradores = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMoradores = new javax.swing.JTable();
        moradorPanel = new javax.swing.JPanel();
        lblCpf = new javax.swing.JLabel();
        txtCpf = new javax.swing.JTextField();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        lblSobrenome = new javax.swing.JLabel();
        txtSobrenome = new javax.swing.JTextField();
        lblTelefones = new javax.swing.JLabel();
        txtTelefones = new javax.swing.JTextField();
        lblEmails = new javax.swing.JLabel();
        txtEmails = new javax.swing.JTextField();
        lblApartamento = new javax.swing.JLabel();
        txtApartamento = new javax.swing.JTextField();
        lblObservacoes = new javax.swing.JLabel();
        lblPendencias = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtPendencias = new javax.swing.JTextArea();
        lblSituacoes = new javax.swing.JLabel();
        txtObservacoes = new javax.swing.JTextField();
        comboBoxSituacoes = new javax.swing.JComboBox<>();
        btnCriar = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        abaProblemas = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProblemas = new javax.swing.JTable();
        problemaPanel = new javax.swing.JPanel();
        lblNomeProblema = new javax.swing.JLabel();
        txtNomeProblema = new javax.swing.JTextField();
        lblDataInicio = new javax.swing.JLabel();
        txtDataInicio = new javax.swing.JTextField();
        lblDataResolucao = new javax.swing.JLabel();
        txtDataResolucao = new javax.swing.JTextField();
        lblDescricao = new javax.swing.JLabel();
        lblSituacoes1 = new javax.swing.JLabel();
        comboBoxSituacoesProblema = new javax.swing.JComboBox<>();
        btnCriarProblema = new javax.swing.JButton();
        btnUpdateProblema = new javax.swing.JButton();
        btnDeletarProblema = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtDescricaoProblema = new javax.swing.JTextArea();
        abaReunioes = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableReunioes = new javax.swing.JTable();
        problemaPanel1 = new javax.swing.JPanel();
        lblDataReuniao = new javax.swing.JLabel();
        txtDataReuniao = new javax.swing.JTextField();
        lblFinalidadeReuniao = new javax.swing.JLabel();
        btnCriarReuniao = new javax.swing.JButton();
        btnUpdateReuniao = new javax.swing.JButton();
        btnDeletarReuniao = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtFinalidadeReuniao = new javax.swing.JTextArea();

        menuRefresh.setText("Atualizar");
        menuRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRefreshActionPerformed(evt);
            }
        });
        jPopupMenu.add(menuRefresh);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Condomínio ABC");
        setResizable(false);

        abaMoradores.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jScrollPane1.setMaximumSize(new java.awt.Dimension(32767, 380));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 380));
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        tableMoradores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableMoradores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMoradoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableMoradores);

        abaMoradores.addTab("Lista de moradores", jScrollPane1);

        moradorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editando morador"));

        lblCpf.setText("CPF*");

        lblNome.setText("Nome*");

        lblSobrenome.setText("Sobrenome*");

        lblTelefones.setText("Telefones");

        lblEmails.setText("Emails");

        lblApartamento.setText("Apartamento*");

        lblObservacoes.setText("Observações");

        lblPendencias.setText("Pendências");

        txtPendencias.setColumns(20);
        txtPendencias.setLineWrap(true);
        txtPendencias.setRows(1);
        jScrollPane3.setViewportView(txtPendencias);

        lblSituacoes.setText("Situação");

        comboBoxSituacoes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OK", "PENDENTE", "ALUGADO", "OUTRO" }));

        btnCriar.setText("Criar");
        btnCriar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDeletar.setText("Deletar");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout moradorPanelLayout = new javax.swing.GroupLayout(moradorPanel);
        moradorPanel.setLayout(moradorPanelLayout);
        moradorPanelLayout.setHorizontalGroup(
            moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moradorPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moradorPanelLayout.createSequentialGroup()
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(moradorPanelLayout.createSequentialGroup()
                                .addComponent(lblSobrenome)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSobrenome))
                            .addGroup(moradorPanelLayout.createSequentialGroup()
                                .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moradorPanelLayout.createSequentialGroup()
                                        .addComponent(lblCpf)
                                        .addGap(18, 18, 18))
                                    .addGroup(moradorPanelLayout.createSequentialGroup()
                                        .addComponent(lblNome)
                                        .addGap(8, 8, 8)))
                                .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(moradorPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTelefones)
                                    .addComponent(lblEmails))
                                .addGap(27, 27, 27))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moradorPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblApartamento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))))
                    .addGroup(moradorPanelLayout.createSequentialGroup()
                        .addComponent(btnCriar, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)))
                .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(moradorPanelLayout.createSequentialGroup()
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTelefones)
                            .addComponent(txtEmails)
                            .addComponent(txtApartamento, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSituacoes)
                            .addComponent(lblObservacoes)
                            .addComponent(lblPendencias))
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                            .addComponent(txtObservacoes)
                            .addGroup(moradorPanelLayout.createSequentialGroup()
                                .addComponent(comboBoxSituacoes, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(moradorPanelLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        moradorPanelLayout.setVerticalGroup(
            moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moradorPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(moradorPanelLayout.createSequentialGroup()
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCpf)
                            .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTelefones)
                            .addComponent(txtTelefones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPendencias))
                        .addGap(5, 5, 5)
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNome)
                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmails)
                            .addComponent(txtEmails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSobrenome)
                            .addComponent(txtSobrenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblApartamento)
                            .addComponent(txtApartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(moradorPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtObservacoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblObservacoes))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSituacoes)
                            .addComponent(comboBoxSituacoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(moradorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCriar, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        abaMoradores.addTab("Editar", moradorPanel);

        jTabbedPane1.addTab("Moradores", abaMoradores);

        abaProblemas.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jScrollPane2.setMaximumSize(new java.awt.Dimension(32767, 380));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(452, 380));
        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        tableProblemas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableProblemas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableProblemasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableProblemas);

        abaProblemas.addTab("Lista de problemas", jScrollPane2);

        problemaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Editando problema"));

        lblNomeProblema.setText("Problema*");

        lblDataInicio.setText("Data início");

        lblDataResolucao.setText("Data resolução");

        lblDescricao.setText("Descrição*");

        lblSituacoes1.setText("Situação");

        comboBoxSituacoesProblema.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RESOLVIDO", "NÃO RESOLVIDO" }));

        btnCriarProblema.setText("Criar");
        btnCriarProblema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarProblemaActionPerformed(evt);
            }
        });

        btnUpdateProblema.setText("Update");
        btnUpdateProblema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateProblemaActionPerformed(evt);
            }
        });

        btnDeletarProblema.setText("Deletar");
        btnDeletarProblema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarProblemaActionPerformed(evt);
            }
        });

        txtDescricaoProblema.setColumns(20);
        txtDescricaoProblema.setLineWrap(true);
        txtDescricaoProblema.setRows(2);
        jScrollPane4.setViewportView(txtDescricaoProblema);

        javax.swing.GroupLayout problemaPanelLayout = new javax.swing.GroupLayout(problemaPanel);
        problemaPanel.setLayout(problemaPanelLayout);
        problemaPanelLayout.setHorizontalGroup(
            problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(problemaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, problemaPanelLayout.createSequentialGroup()
                        .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataInicio)
                            .addGroup(problemaPanelLayout.createSequentialGroup()
                                .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNomeProblema)
                                    .addComponent(lblSituacoes1))
                                .addGap(18, 18, 18)
                                .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxSituacoesProblema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNomeProblema, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                                    .addComponent(txtDataInicio))))
                        .addGap(37, 37, 37)
                        .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDataResolucao)
                            .addComponent(lblDescricao))
                        .addGap(27, 27, 27))
                    .addGroup(problemaPanelLayout.createSequentialGroup()
                        .addComponent(btnCriarProblema, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)))
                .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(problemaPanelLayout.createSequentialGroup()
                        .addComponent(btnUpdateProblema, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addComponent(btnDeletarProblema, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(problemaPanelLayout.createSequentialGroup()
                        .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4)
                            .addComponent(txtDataResolucao))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        problemaPanelLayout.setVerticalGroup(
            problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(problemaPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDataResolucao)
                    .addComponent(txtDataResolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNomeProblema)
                    .addComponent(txtNomeProblema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(problemaPanelLayout.createSequentialGroup()
                        .addComponent(lblDataInicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSituacoes1)
                            .addComponent(comboBoxSituacoesProblema, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(problemaPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(lblDescricao))
                    .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(problemaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdateProblema, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCriarProblema, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletarProblema, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        abaProblemas.addTab("Editar", problemaPanel);

        jTabbedPane1.addTab("Problemas", abaProblemas);

        abaReunioes.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

        jScrollPane5.setMaximumSize(new java.awt.Dimension(32767, 380));
        jScrollPane5.setPreferredSize(new java.awt.Dimension(452, 380));
        jScrollPane5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane5MouseClicked(evt);
            }
        });

        tableReunioes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableReunioes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableReunioesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableReunioes);

        abaReunioes.addTab("Lista de reuniões", jScrollPane5);

        problemaPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Editando problema"));

        lblDataReuniao.setText("Data reunião*");

        lblFinalidadeReuniao.setText("Finalidade*");

        btnCriarReuniao.setText("Criar");
        btnCriarReuniao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarReuniaoActionPerformed(evt);
            }
        });

        btnUpdateReuniao.setText("Update");
        btnUpdateReuniao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReuniaoActionPerformed(evt);
            }
        });

        btnDeletarReuniao.setText("Deletar");
        btnDeletarReuniao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarReuniaoActionPerformed(evt);
            }
        });

        txtFinalidadeReuniao.setColumns(20);
        txtFinalidadeReuniao.setLineWrap(true);
        txtFinalidadeReuniao.setRows(2);
        jScrollPane6.setViewportView(txtFinalidadeReuniao);

        javax.swing.GroupLayout problemaPanel1Layout = new javax.swing.GroupLayout(problemaPanel1);
        problemaPanel1.setLayout(problemaPanel1Layout);
        problemaPanel1Layout.setHorizontalGroup(
            problemaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(problemaPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(problemaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(problemaPanel1Layout.createSequentialGroup()
                        .addComponent(btnCriarReuniao, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, problemaPanel1Layout.createSequentialGroup()
                        .addComponent(lblDataReuniao)
                        .addGap(18, 18, 18)
                        .addComponent(txtDataReuniao, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(lblFinalidadeReuniao)
                        .addGap(18, 18, 18)))
                .addGroup(problemaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(problemaPanel1Layout.createSequentialGroup()
                        .addComponent(btnUpdateReuniao, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                        .addComponent(btnDeletarReuniao, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(problemaPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        problemaPanel1Layout.setVerticalGroup(
            problemaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(problemaPanel1Layout.createSequentialGroup()
                .addGroup(problemaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(problemaPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(problemaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDataReuniao)
                            .addComponent(txtDataReuniao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFinalidadeReuniao)))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(problemaPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUpdateReuniao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCriarReuniao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletarReuniao, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11))
        );

        abaReunioes.addTab("Editar", problemaPanel1);

        jTabbedPane1.addTab("Reuniões", abaReunioes);
        abaReunioes.getAccessibleContext().setAccessibleName("Lista de Reuniões");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCriarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarActionPerformed
        try {
            Morador morador = new Morador();
            morador.setCpf(txtCpf.getText());
            morador.setNome(txtNome.getText());
            morador.setSobrenome(txtSobrenome.getText());
            morador.setTelefones(txtTelefones.getText());
            morador.setEmails(txtEmails.getText());
            morador.setApartamento(Integer.valueOf(txtApartamento.getText()));
            morador.setObservacoes(txtObservacoes.getText());
            morador.setPendencias(txtPendencias.getText());
            morador.setSituacaoMorador(String.valueOf(comboBoxSituacoes.getSelectedItem()));
            MoradorApi moradorApi = ApiClient.getClient().create(MoradorApi.class);
            moradorApi.createMorador(morador).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Morador cadastrado com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCriarActionPerformed

    private void tableMoradoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMoradoresMouseClicked
        int selectedRow = tableMoradores.getSelectedRow();
        String cpf = tableMoradores.getValueAt(selectedRow, 0).toString();
        MoradorApi moradorApi = ApiClient.getClient().create(MoradorApi.class);
        moradorApi.findMoradorByCpf(cpf).enqueue(new Callback<Morador>() {
            @Override
            public void onResponse(Call<Morador> arg0, Response<Morador> response) {
                if (response.isSuccessful()) {
                    Morador morador = response.body();
                    txtCpf.setText(morador.getCpf());
                    txtNome.setText(morador.getNome());
                    txtSobrenome.setText(morador.getSobrenome());
                    txtTelefones.setText(morador.getTelefones());
                    txtEmails.setText(morador.getEmails());
                    txtApartamento.setText(String.valueOf(morador.getApartamento()));
                    txtObservacoes.setText(morador.getObservacoes());
                    txtPendencias.setText(morador.getPendencias());
                    comboBoxSituacoes.setSelectedItem(morador.getSituacaoMorador());
                }
            }

            @Override
            public void onFailure(Call<Morador> arg0, Throwable e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        });

        if (SwingUtilities.isRightMouseButton(evt) && evt.getClickCount() == 1) {
            jPopupMenu.show(tableMoradores, evt.getX(), evt.getY());
        }

    }//GEN-LAST:event_tableMoradoresMouseClicked

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "Deseja realmente deletar o morador?",
                "Confirmação de exclusão", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            MoradorApi moradorApi = ApiClient.getClient().create(MoradorApi.class);
            moradorApi.deleteMorador(txtCpf.getText()).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Morador excluído!");
        }
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) && evt.getClickCount() == 1) {
            jPopupMenu.show(tableMoradores, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void menuRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRefreshActionPerformed
        loadData();
    }//GEN-LAST:event_menuRefreshActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            Morador morador = new Morador();
            morador.setCpf(txtCpf.getText());
            morador.setNome(txtNome.getText());
            morador.setSobrenome(txtSobrenome.getText());
            morador.setTelefones(txtTelefones.getText());
            morador.setEmails(txtEmails.getText());
            morador.setApartamento(Integer.valueOf(txtApartamento.getText()));
            morador.setObservacoes(txtObservacoes.getText());
            morador.setPendencias(txtPendencias.getText());
            morador.setSituacaoMorador(String.valueOf(comboBoxSituacoes.getSelectedItem()));
            MoradorApi moradorApi = ApiClient.getClient().create(MoradorApi.class);
            moradorApi.createMorador(morador).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Dados do morador atualizados!", "Morador", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void tableProblemasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableProblemasMouseClicked
        int selectedRow = tableProblemas.getSelectedRow();
        int id = Integer.parseInt(tableProblemas.getValueAt(selectedRow, 0).toString());
        ProblemaApi problemaApi = ApiClient.getClient().create(ProblemaApi.class);
        problemaApi.findProblemaById(id).enqueue(new Callback<Problema>() {
            @Override
            public void onResponse(Call<Problema> arg0, Response<Problema> response) {
                if (response.isSuccessful()) {
                    Problema problema = response.body();
                    txtNomeProblema.setText(problema.getProblema());
                    txtDataInicio.setText(problema.getDataInicio().toString());
                    txtDataResolucao.setText(problema.getDataResolucao().toString());
                    txtDescricaoProblema.setText(problema.getDescricao());
                    comboBoxSituacoesProblema.setSelectedItem(problema.getSituacaoProblema());
                }
            }

            @Override
            public void onFailure(Call<Problema> arg0, Throwable e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        });

        if (SwingUtilities.isRightMouseButton(evt) && evt.getClickCount() == 1) {
            jPopupMenu.show(tableProblemas, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableProblemasMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) && evt.getClickCount() == 1) {
            jPopupMenu.show(tableProblemas, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void btnCriarProblemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarProblemaActionPerformed
        try {
            Problema problema = new Problema();
            problema.setProblema(txtNomeProblema.getText());
            problema.setDataInicio(txtDataInicio.getText());
            problema.setDataResolucao(txtDataResolucao.getText());
            problema.setDescricao(txtDescricaoProblema.getText());
            problema.setSituacaoProblema(String.valueOf(comboBoxSituacoesProblema.getSelectedItem()));
            ProblemaApi problemaApi = ApiClient.getClient().create(ProblemaApi.class);
            problemaApi.createProblema(problema).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Problema cadastrado com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCriarProblemaActionPerformed

    private void btnUpdateProblemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateProblemaActionPerformed
        int selectedRow = tableProblemas.getSelectedRow();
        int id = Integer.parseInt(tableProblemas.getValueAt(selectedRow, 0).toString());
        try {
            Problema problema = new Problema();
            problema.setCodigo(id);
            problema.setProblema(txtNomeProblema.getText());
            problema.setDataInicio(txtDataInicio.getText());
            problema.setDataResolucao(txtDataResolucao.getText());
            problema.setDescricao(txtDescricaoProblema.getText());
            problema.setSituacaoProblema(String.valueOf(comboBoxSituacoesProblema.getSelectedItem()));
            ProblemaApi problemaApi = ApiClient.getClient().create(ProblemaApi.class);
            problemaApi.createProblema(problema).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Dados do problema atualizados!", "Problema", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateProblemaActionPerformed

    private void btnDeletarProblemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarProblemaActionPerformed
        int selectedRow = tableProblemas.getSelectedRow();
        int id = Integer.parseInt(tableProblemas.getValueAt(selectedRow, 0).toString());
        int result = JOptionPane.showConfirmDialog(null, "Deseja excluir o problema?",
                "Excluir problema", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            ProblemaApi problemaApi = ApiClient.getClient().create(ProblemaApi.class);
            problemaApi.deleteProblema(id).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Problema excluído!");
        }
    }//GEN-LAST:event_btnDeletarProblemaActionPerformed

    private void tableReunioesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableReunioesMouseClicked
        int selectedRow = tableReunioes.getSelectedRow();
        int id = Integer.parseInt(tableReunioes.getValueAt(selectedRow, 0).toString());
        ReuniaoApi reuniaoApi = ApiClient.getClient().create(ReuniaoApi.class);
        reuniaoApi.findReuniaoById(id).enqueue(new Callback<Reuniao>() {
            @Override
            public void onResponse(Call<Reuniao> arg0, Response<Reuniao> response) {
                if (response.isSuccessful()) {
                    Reuniao reuniao = response.body();
                    txtDataReuniao.setText(reuniao.getData());
                    txtFinalidadeReuniao.setText(reuniao.getFinalidade());
                }
            }

            @Override
            public void onFailure(Call<Reuniao> arg0, Throwable e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        });

        if (SwingUtilities.isRightMouseButton(evt) && evt.getClickCount() == 1) {
            jPopupMenu.show(tableReunioes, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableReunioesMouseClicked

    private void jScrollPane5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane5MouseClicked
        if (SwingUtilities.isRightMouseButton(evt) && evt.getClickCount() == 1) {
            jPopupMenu.show(tableReunioes, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jScrollPane5MouseClicked

    private void btnCriarReuniaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarReuniaoActionPerformed
        try {
            Reuniao reuniao = new Reuniao();
            reuniao.setData(txtDataReuniao.getText());
            reuniao.setFinalidade(txtFinalidadeReuniao.getText());
            ReuniaoApi reuniaoApi = ApiClient.getClient().create(ReuniaoApi.class);
            reuniaoApi.createReuniao(reuniao).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Reunião cadastrada com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnCriarReuniaoActionPerformed

    private void btnUpdateReuniaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReuniaoActionPerformed
        int selectedRow = tableReunioes.getSelectedRow();
        int id = Integer.parseInt(tableReunioes.getValueAt(selectedRow, 0).toString());
        try {
            Reuniao reuniao = new Reuniao();
            reuniao.setCodigo(id);
            reuniao.setData(txtDataReuniao.getText());
            reuniao.setFinalidade(txtFinalidadeReuniao.getText());
            ReuniaoApi reuniaoApi = ApiClient.getClient().create(ReuniaoApi.class);
            reuniaoApi.createReuniao(reuniao).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Dados da reunião atualizados!", "Reunião", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateReuniaoActionPerformed

    private void btnDeletarReuniaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarReuniaoActionPerformed
        int selectedRow = tableReunioes.getSelectedRow();
        int id = Integer.parseInt(tableReunioes.getValueAt(selectedRow, 0).toString());
        int result = JOptionPane.showConfirmDialog(null, "Deseja excluir a reunião?",
                "Excluir reunião", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            ReuniaoApi reuniaoApi = ApiClient.getClient().create(ReuniaoApi.class);
            reuniaoApi.deleteReuniao(id).enqueue(new Callback<Void>() {
                @Override
                public void onResponse(Call<Void> arg0, Response<Void> response) {
                    if (response.isSuccessful()) {
                        loadData();
                    }
                }

                @Override
                public void onFailure(Call<Void> arg0, Throwable e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
            });
            JOptionPane.showMessageDialog(null, "Reunião excluída!");
        }
    }//GEN-LAST:event_btnDeletarReuniaoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("FlatLafLight".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane abaMoradores;
    private javax.swing.JTabbedPane abaProblemas;
    private javax.swing.JTabbedPane abaReunioes;
    private javax.swing.JButton btnCriar;
    private javax.swing.JButton btnCriarProblema;
    private javax.swing.JButton btnCriarReuniao;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnDeletarProblema;
    private javax.swing.JButton btnDeletarReuniao;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnUpdateProblema;
    private javax.swing.JButton btnUpdateReuniao;
    private javax.swing.JComboBox<String> comboBoxSituacoes;
    private javax.swing.JComboBox<String> comboBoxSituacoesProblema;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblApartamento;
    private javax.swing.JLabel lblCpf;
    private javax.swing.JLabel lblDataInicio;
    private javax.swing.JLabel lblDataResolucao;
    private javax.swing.JLabel lblDataReuniao;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblEmails;
    private javax.swing.JLabel lblFinalidadeReuniao;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblNomeProblema;
    private javax.swing.JLabel lblObservacoes;
    private javax.swing.JLabel lblPendencias;
    private javax.swing.JLabel lblSituacoes;
    private javax.swing.JLabel lblSituacoes1;
    private javax.swing.JLabel lblSobrenome;
    private javax.swing.JLabel lblTelefones;
    private javax.swing.JMenuItem menuRefresh;
    private javax.swing.JPanel moradorPanel;
    private javax.swing.JPanel problemaPanel;
    private javax.swing.JPanel problemaPanel1;
    private javax.swing.JTable tableMoradores;
    private javax.swing.JTable tableProblemas;
    private javax.swing.JTable tableReunioes;
    private javax.swing.JTextField txtApartamento;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtDataInicio;
    private javax.swing.JTextField txtDataResolucao;
    private javax.swing.JTextField txtDataReuniao;
    private javax.swing.JTextArea txtDescricaoProblema;
    private javax.swing.JTextField txtEmails;
    private javax.swing.JTextArea txtFinalidadeReuniao;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtNomeProblema;
    private javax.swing.JTextField txtObservacoes;
    private javax.swing.JTextArea txtPendencias;
    private javax.swing.JTextField txtSobrenome;
    private javax.swing.JTextField txtTelefones;
    // End of variables declaration//GEN-END:variables

    private void loadData() {
        try {
            MoradorApi moradorApi = ApiClient.getClient().create(MoradorApi.class);
            ProblemaApi problemaApi = ApiClient.getClient().create(ProblemaApi.class);
            ReuniaoApi reuniaoApi = ApiClient.getClient().create(ReuniaoApi.class);

            moradorApi.findAll().enqueue(new Callback<List<Morador>>() {
                @Override
                public void onResponse(Call<List<Morador>> call, Response<List<Morador>> response) {
                    if (response.isSuccessful()) {
                        DefaultTableModel defaultTableModelMorador = new DefaultTableModel();
                        defaultTableModelMorador.addColumn("CPF");
                        defaultTableModelMorador.addColumn("Nome");
                        defaultTableModelMorador.addColumn("Sobrenome");
                        defaultTableModelMorador.addColumn("Telefone");
                        defaultTableModelMorador.addColumn("Email");
                        defaultTableModelMorador.addColumn("Apartamento");
                        defaultTableModelMorador.addColumn("Observações");
                        defaultTableModelMorador.addColumn("Pendências");
                        defaultTableModelMorador.addColumn("Situação");
                        for (Morador morador : response.body()) {
                            defaultTableModelMorador.addRow(new Object[]{
                                morador.getCpf(),
                                morador.getNome(),
                                morador.getSobrenome(),
                                morador.getTelefones(),
                                morador.getEmails(),
                                morador.getApartamento(),
                                morador.getObservacoes(),
                                morador.getPendencias(),
                                morador.getSituacaoMorador()
                            });
                        }
                        tableMoradores.setModel(defaultTableModelMorador);
                    }
                }

                @Override
                public void onFailure(Call<List<Morador>> Call, Throwable t) {
                    JOptionPane.showConfirmDialog(null, t.getMessage());
                }

            });

            problemaApi.findAll().enqueue(new Callback<List<Problema>>() {
                @Override
                public void onResponse(Call<List<Problema>> call, Response<List<Problema>> response) {
                    if (response.isSuccessful()) {
                        DefaultTableModel defaultTableModelProblema = new DefaultTableModel();
                        defaultTableModelProblema.addColumn("Código");
                        defaultTableModelProblema.addColumn("Problema");
                        defaultTableModelProblema.addColumn("Início");
                        defaultTableModelProblema.addColumn("Resolução");
                        defaultTableModelProblema.addColumn("Situação");
                        defaultTableModelProblema.addColumn("Descrição");
                        for (Problema problema : response.body()) {
                            defaultTableModelProblema.addRow(new Object[]{
                                problema.getCodigo(),
                                problema.getProblema(),
                                problema.getDataInicio(),
                                problema.getDataResolucao(),
                                problema.getSituacaoProblema(),
                                problema.getDescricao()
                            });
                        }
                        tableProblemas.setModel(defaultTableModelProblema);
                    }
                }

                @Override
                public void onFailure(Call<List<Problema>> Call, Throwable t) {
                    JOptionPane.showConfirmDialog(null, t.getMessage());
                }

            });

            reuniaoApi.findAll().enqueue(new Callback<List<Reuniao>>() {
                @Override
                public void onResponse(Call<List<Reuniao>> call, Response<List<Reuniao>> response) {
                    if (response.isSuccessful()) {
                        DefaultTableModel defaultTableModelReuniao = new DefaultTableModel();
                        defaultTableModelReuniao.addColumn("Código");
                        defaultTableModelReuniao.addColumn("Data");
                        defaultTableModelReuniao.addColumn("Finalidade");
                        for (Reuniao reuniao : response.body()) {
                            defaultTableModelReuniao.addRow(new Object[]{
                                reuniao.getCodigo(),
                                reuniao.getData(),
                                reuniao.getFinalidade()
                            });
                        }
                        tableReunioes.setModel(defaultTableModelReuniao);
                    }
                }

                @Override
                public void onFailure(Call<List<Reuniao>> Call, Throwable t) {
                    JOptionPane.showConfirmDialog(null, t.getMessage());
                }
            });

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}
